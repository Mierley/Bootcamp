#include <vector>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <iomanip>
using namespace std;
int main()
{
	int n, INF = 111;
	cin >> n;

	vector <vector <int> > a(n, (vector <int>(n, 0)));

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> a[i][j];

	vector <vector <int> > d((1 << n), vector<int>(n, INF));
	d[0][0] = 0;
	/* заполнение динамикой вперёд
	d[mask][i] - минимальный путь, пройденный коммивояжёром, если он посетил подмножество
	городов mask и находится в i-м городе

	*/


	//////////////////////////////////////////////////////
	//for (int i = 0; i < (1 << n); i++)
	//{
	//	for (int j = 0; j < n; j++)
	//		cout << setw(3) << d[i][j] << " ";
	//	cout << endl;
	//}
	/////////////////////////////////////////////////////


	for (int mask = 0; mask < (1 << n); mask++)
	{
		for (int i = 0; i < n; i++)
			// перебираем состояния и делаем из них перреходы вперёд
		{
			if (d[mask][i] == INF)
				continue;
			// если для данного состояния значение равно бесконечности,то такое состояние недопустимо и мы пропускаем его
			for (int j = 0; j < n; j++)
			{	// перебираем в какой город мы пойдём из i 
				if (!(mask & (1 << j)))
					// проверяем не входит ли город j в mask
					d[mask ^ (1 << j)][j] = min(d[mask ^ (1 << j)][j], d[mask][i] + a[i][j]);
				// mask ^ (1 << j) - сформировали новую маску и теперь обновляем значение



				//////////////////////////////////////////////////////////////
				//cout << endl << " look " << endl;
				//for (int i = 0; i < (1 << n); i++)
				//{
				//	for (int j = 0; j < n; j++)
				//		cout << setw(3) << d[i][j] << " ";
				//	cout << endl;
				//}
				////////////////////////////////////////////////////////////////
			}
		}
	}
	cout << d[(1 << n) - 1][0] << endl;
	// ответ находится в mask 11...1

	////////////////////////////////////////////////////////////////////
	//cout << endl << " look " << endl;
	//for (int i = 0; i < (1 << n); i++)
	//{
	//	for (int j = 0; j < n; j++)
	//		cout <<setw(3) << d[i][j] << " ";
	//	cout << endl;
	//}
	////////////////////////////////////////////////////////////////
}

